git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/IshuSahu/react-learn.git
git push -u origin main



Q: Difference between a Library and Framework?
A: A library is a collection of packages that perform specific operations whereas a framework contains the basic flow and architecture of an application. The major difference between them is the complexity. 
Libraries contain a number of methods that a developer can just call whenever they write code. React js is library and Angular is Framework. 
The framework provides the flow of a software application and tells the developer what it needs and calls the code provided by the developer as required. If a library is used, the application calls the code from the library.

Q: Why is React known as React?
A: React is named React because of its ability to react to changes in data. React is called React because it was designed to be a declarative, efficient, and flexible JavaScript library for building user interfaces. 
The name React was chosen because the library was designed to allow developers to "react" to changes in state and data within an application, and to update the user interface in a declarative and efficient manner. React is a JavaScript-based UI development library. Facebook and an open-source developer community run it. 

Q: What is the difference between package.json and package-lock.json?
A: package.json:
•	This file is mandatory for every project
•	It contains basic information about the project
•	Application name/version/scripts
package-lock.json:
•	This file is automatically generated for those operations where npm modifies either the node_module tree or package-json.
•	It is generated after an npm install
•	It allows future devs & automated systems to download the same dependencies as the project.
the package. json file focuses on project metadata and specifying the desired versions of dependencies, while the package-lock. json file ensures deterministic installations by locking the exact versions of dependencies and their dependencies

Q: Why should I not modify package-lock.json?
A: package-lock.json file contains the information about the dependencies and their versions used in the project. Deleting it would cause dependencies issues in the production environment. So don't modify it, It's being handled automatically by NPM. 

Q: What is the dist folder?
A: The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications. Along with the minified code, the /dist folder also comprises of all the compiled modules that may or may not be used with other systems.
Q: What is npx?
A: npx is a tool that is used to execute the packages. It comes with the npm, when you installed npm above 5.2.0 version then automatically npx will installed. It is an npm package runner that can execute any package that you want from the npm registry without even installing that package.
"dependencies" : Packages required by your application in production. 
"devDependencies" : Packages that are only needed for local development and testing.
Q: What is difference between React and ReactDOM?
A: React is a JavaScript library for building User Interfaces whereas ReactDOM is also JavaScript library that allows React to interact with the DOM. The react package contains React.createElement(), React.Component, React.Children, and other helpers related to elements and component classes. The react-dom package contains ReactDOM.render(), and in react-dom/server we have server-side rendering support with ReactDOMServer.renderToString() and ReactDOMServer.renderToStaticMarkup().
Q: What are React Hooks?
A: In React version 16.8, React introduced a new pattern called Hooks. React Hooks are simple JavaScript functions that we can use to isolate the reusable part from a functional component. Hooks can be stateful and can manage side-effects. Hooks allow you to reuse stateful logic without changing your component hierarchy. 
React provides a bunch of standard in-built hooks:
•	useState: To manage states. Returns a stateful value and an updater function to update it.
•	useEffect: To manage side-effects like API calls, subscriptions, timers, mutations, and more.
•	useContext: To return the current value for a context.
•	useReducer: A useState alternative to help with complex state management.
•	useCallback: It returns a memorized version of a callback to help a child component not re-render unnecessarily.
•	useMemo: It returns a memoized value that helps in performance optimizations.
•	useRef: It returns a ref object with a current property. The ref object is mutable. It is mainly used to access a child component imperatively.
•	useLayoutEffect: It fires at the end of all DOM mutations. It's best to use useEffect as much as possible over this one as the useLayoutEffect fires synchronously.
•	useDebugValue: Helps to display a label in React DevTools for custom hooks.

